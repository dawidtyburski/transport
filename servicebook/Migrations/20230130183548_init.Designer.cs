// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using transport;

#nullable disable

namespace transport.Migrations
{
    [DbContext(typeof(transportDbContext))]
    [Migration("20230130183548_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("transport.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "Austria"
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Belgia"
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "Bułgaria"
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Chorwacja"
                        },
                        new
                        {
                            Id = 5,
                            CountryName = "Cypr"
                        },
                        new
                        {
                            Id = 6,
                            CountryName = "Czechy"
                        },
                        new
                        {
                            Id = 7,
                            CountryName = "Dania"
                        },
                        new
                        {
                            Id = 8,
                            CountryName = "Estonia"
                        },
                        new
                        {
                            Id = 9,
                            CountryName = "Finlandia"
                        },
                        new
                        {
                            Id = 10,
                            CountryName = "Francja"
                        },
                        new
                        {
                            Id = 11,
                            CountryName = "Grecja"
                        },
                        new
                        {
                            Id = 12,
                            CountryName = "Hiszpania"
                        },
                        new
                        {
                            Id = 13,
                            CountryName = "Irlandia"
                        },
                        new
                        {
                            Id = 14,
                            CountryName = "Litwa"
                        },
                        new
                        {
                            Id = 15,
                            CountryName = "Luksemburg"
                        },
                        new
                        {
                            Id = 16,
                            CountryName = "Łotwa"
                        },
                        new
                        {
                            Id = 17,
                            CountryName = "Malta"
                        },
                        new
                        {
                            Id = 18,
                            CountryName = "Holandia"
                        },
                        new
                        {
                            Id = 19,
                            CountryName = "Niemcy"
                        },
                        new
                        {
                            Id = 20,
                            CountryName = "Polska"
                        },
                        new
                        {
                            Id = 21,
                            CountryName = "Portugalia"
                        },
                        new
                        {
                            Id = 22,
                            CountryName = "Rumunia"
                        },
                        new
                        {
                            Id = 23,
                            CountryName = "Słowacja"
                        },
                        new
                        {
                            Id = 24,
                            CountryName = "Słowenia"
                        },
                        new
                        {
                            Id = 25,
                            CountryName = "Szwecja"
                        },
                        new
                        {
                            Id = 26,
                            CountryName = "Węgry"
                        },
                        new
                        {
                            Id = 27,
                            CountryName = "Włochy"
                        });
                });

            modelBuilder.Entity("transport.Models.DestinationAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("DestinationAdresses");
                });

            modelBuilder.Entity("transport.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationAdressId")
                        .HasColumnType("int");

                    b.Property<int>("InitialAdressId")
                        .HasColumnType("int");

                    b.Property<float>("PalletPlace")
                        .HasColumnType("real");

                    b.Property<int>("PickupAdressId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAdressId");

                    b.HasIndex("PickupAdressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("transport.Models.PickupAdress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("InitialAdresses");
                });

            modelBuilder.Entity("transport.Models.DestinationAdress", b =>
                {
                    b.HasOne("transport.Models.Country", "Country")
                        .WithMany("DestinationAdresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("transport.Models.Order", b =>
                {
                    b.HasOne("transport.Models.DestinationAdress", "DestinationAdress")
                        .WithMany("Orders")
                        .HasForeignKey("DestinationAdressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("transport.Models.PickupAdress", "PickupAdress")
                        .WithMany("Orders")
                        .HasForeignKey("PickupAdressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DestinationAdress");

                    b.Navigation("PickupAdress");
                });

            modelBuilder.Entity("transport.Models.PickupAdress", b =>
                {
                    b.HasOne("transport.Models.Country", "Country")
                        .WithMany("InitialAdresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("transport.Models.Country", b =>
                {
                    b.Navigation("DestinationAdresses");

                    b.Navigation("InitialAdresses");
                });

            modelBuilder.Entity("transport.Models.DestinationAdress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("transport.Models.PickupAdress", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
